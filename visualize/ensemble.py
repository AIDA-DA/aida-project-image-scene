# -*- coding: utf-8 -*-
"""ensemble.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VV3uvjZDyDCFnGGAivzDt9sOUm7pXum7

# Ensemble average of probabilities from various models
## of test time augmented probabilies

# Lib imports
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.metrics import accuracy_score, confusion_matrix
import itertools

from google.colab import drive
drive.mount('/content/drive')

Data_path = '/content/drive/MyDrive/Colab Notebooks/FinalProject/Visual-1/'
Data_path + 'resnet50_places_progressive_resizing/val_probs_tta.csv'

"""# Load data probability files with all test time augmented validations"""

# Resnet 50 places 365
rn50_plc_val_df = pd.read_csv(Data_path + 'resnet50_places_progressive_resizing/val_probs_tta.csv')
rn50_plc_val_df.name = 'Resnet 50 places 365'

# Imagenet resnet 50
rn50_val_df = pd.read_csv(Data_path + 'resnet_50_progressive_resizing/val_probs_tta.csv')
rn50_val_df.name ='Imagenet resnet 50'

# Imagenet resnet 101
rn101_val_df = pd.read_csv(Data_path + 'resnet_101/val_probs_tta.csv')
rn101_val_df.name ='Imagenet resnet 101'

# Imagenet resnext 101-next 
sernxt_val_df = pd.read_csv(Data_path + 'se_resnext101/val_probs_tta.csv')
sernxt_val_df.name ='Imagenet resnext 101-next'

print('\n\033[1m >>', rn50_plc_val_df.name); display(rn50_plc_val_df.head())
print('\n\033[1m >>', rn50_val_df.name); display(rn50_val_df.head())
print('\n\033[1m >>', rn101_val_df.name); display(rn101_val_df.head())
print('\n\033[1m >>', sernxt_val_df.name); display(rn50_val_df.head())

"""# Ensembling"""

# rn50_plc_val_df.columns
label_cols = ['buildings', 'forest', 'glacier', 'mountain', 'sea', 'street']
rn101_val_df.columns

# ground label for validation set
val_ground_labels = rn101_val_df['ground_label'].values
rn101_val_df['ground_label'].shape

# add all probs 
val_all_sum = rn101_val_df[label_cols].values + rn50_val_df[label_cols].values + rn50_plc_val_df[label_cols].values + sernxt_val_df[label_cols].values
val_all_sum.shape

val_pred = val_all_sum.argmax(1)

# Check accuracy for valiadtion set
accuracy_score(y_true=val_ground_labels, y_pred=val_pred)

"""## validation set accuracy >

# Plot Confusion matrix
"""

label_mapper = {0: 'buildings', 1: 'forest', 2: 'glacier', 3: 'mountain', 4: 'sea', 5: 'street'}

# https://www.kaggle.com/artgor/where-do-the-robots-drive

def plot_confusion_matrix(truth, pred, classes, normalize=False, title=''):
    cm = confusion_matrix(truth, pred)
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
    
    plt.figure(figsize=(5, 5))
    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
    plt.title('Confusion matrix', size=15)
    plt.colorbar(fraction=0.046, pad=0.04)
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=90)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.grid(False)
    plt.tight_layout()

plot_confusion_matrix(pd.Series(val_ground_labels).map(label_mapper), pd.Series(val_pred).map(label_mapper), label_cols)

"""# Load augmented test time data probability files."""

# resnet 50 places 365
rn50_plc_test_df = pd.read_csv(Data_path + 'resnet50_places_progressive_resizing/test_probs_tta.csv')

# Imagenet resnet 50
rn50_test_df = pd.read_csv(Data_path + 'resnet_50_progressive_resizing/test_probs_tta.csv')

# Imagenet resnet 101
rn101_test_df = pd.read_csv(Data_path + 'resnet_101/test_probs_tta.csv')

# Imagenet resnext 101 
sernxt_test_df = pd.read_csv(Data_path + 'se_resnext101/test_probs_tta.csv')

# add probabilities
test_all_sum = rn101_test_df[label_cols].values + rn50_test_df[label_cols].values + rn50_plc_test_df[label_cols].values + sernxt_test_df[label_cols].values

# image file names
test_img_names = rn101_test_df['image_name'].values

# make a submission
pd.DataFrame({'image_name': test_img_names, 'label': test_all_sum.argmax(1)}).to_csv('sub.csv', index=False)

